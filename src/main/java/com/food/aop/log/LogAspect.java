package com.food.aop.log;import com.food.framework.util.DateUtil;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import java.util.Date;/** * Created by user on 16-11-17. */@Component@Aspect  //定义切面类public class LogAspect {    private Logger logger = LoggerFactory.getLogger(LogAspect.class);    //定义切入点，提供一个方法，这个方法的名字就是改切入点的id    @Pointcut("execution(public * com.food.controller.*.*(..))")    private void actionLog() {    }    //针对指定的切入点表达式选择的切入点应用前置通知    @Before("actionLog()")    public void before(JoinPoint joinPoint) {//        String className = joinPoint.getTarget().getClass().getName();//        String methodName = joinPoint.getSignature().getName();//        System.out.println(className + "." + methodName + "()before");    }//    //访问命名切入点来应用后置通知//    @AfterReturning(value = "actionLog()", returning = "returnVal")//    public void afterReturn(JoinPoint joinPoint, Object returnVal) throws Throwable {////        String className = joinPoint.getTarget().getClass().getName();////        String methodName = joinPoint.getSignature().getName();////        System.out.println(className + "." + methodName + "()afterReturn");////    }//    //应用最终通知//    @After("actionLog()")//    public void after(JoinPoint joinPoint) throws Throwable {////        String className = joinPoint.getTarget().getClass().getName();////        String methodName = joinPoint.getSignature().getName();////        System.out.println(className + "." + methodName + "()after");//    }//    //应用异常抛出后通知//    @AfterThrowing(pointcut = "actionLog()", throwing = "throwable")//    public void afterThrowing(JoinPoint joinPoint, Throwable throwable) {////        String className = joinPoint.getTarget().getClass().getName();////        String methodName = joinPoint.getSignature().getName();////        System.out.println(className + "." + methodName + "()afterThrowing");////        System.out.println("error:" + throwable.toString());//    }    @Around("actionLog()")    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        String className = proceedingJoinPoint.getTarget().getClass().getName();        String methodName = proceedingJoinPoint.getSignature().getName();        Date beginTime = new Date();        Date endTime = null;        Object object = null;        try {            object = proceedingJoinPoint.proceed();            endTime = new Date();        } catch (Throwable ex) {            endTime = new Date();            logger.error(ex.toString());            throw ex;        }        StringBuffer stringBuffer = new StringBuffer();        stringBuffer.append(DateUtil.toString(beginTime));        stringBuffer.append("-");        stringBuffer.append(DateUtil.toString(endTime));        stringBuffer.append("-");        stringBuffer.append(className);        stringBuffer.append(".");        stringBuffer.append(methodName);        stringBuffer.append("-用时");        stringBuffer.append((endTime.getTime() - beginTime.getTime()));        stringBuffer.append("ms");        logger.info(stringBuffer.toString());        return object;    }}